<[autotemplate]
title={ALPSCore tutorial: Part I}
author={Alexander Gaenko}
usetheme={Frankfurt}
usecolortheme={whale}
lstloadlanguages={sh,C++}
lstset={escapeinside={\#(}{)},style=basic,basicstyle=\small,basewidth=0.5em}
definecolor={babyblue}{rgb}{0.54, 0.81, 0.94}
definecolor={ballblue}{rgb}{0.13, 0.67, 0.8}
[autotemplate]>

== Introduction == 

==== What it is about ====

ALPSCore originated from Algorithms and Libraries for Physics Simulations (ALPS) \url{http://alps.comp-phys.org}

'''The grand idea''': Make the ``library'' code from ALPS available with a ''shorter development cycle'' and a ''decent documentation''.

* What is the ''library code''?
** That will most probably useful for many applications.
** However, ALPSCore is oriented towards Monte Carlo.

* What is the ''development cycle''?
** Introducing features (by request?)
** Testing the features
** Fixing bugs
** Documenting

* What is ''decent documentation''?
** User's documentations
** Tutorials
** Developer's Doxygen-generated reference.

==== Web sites ====

Contributors:
* Emanuel Gull's group, University of Michigan (USA)
* Lukas Gamper, ETH Zurich (Switzerland)
* ...and other people.

* Source code: \url{https://github.com/ALPSCore/ALPSCore}
* Documentation \& tutorials:  \url{http://alpscore.org}
* CloudBees for Continuous Delivery. 

<<<alpscore_sites.pdf,height=0.4\textheight>>>

==== Overview ====
<<<alpscore_classes.pdf,height=0.8\textheight,width=\textwidth,keepaspectratio>>>

== Using ALPSCore == 

==== Using ALPSCore in your program ====

Let's assume that @ALPSCore@ is installed and @ALPSCore\_DIR@ is
pointing to the installation directory.

* How @CMakeLists.txt@ should look to use @ALPSCore@.
* Catch: compilers!

<[code][language=sh,emph={ALPSCore_DIR},emphstyle=\color{blue},basicstyle=\ttfamily]
$ export ALPSCore_DIR=/to/alpscore/installation
$ export CXX=$(which needed_cpp)
$ export CC=$(which needed_cc)
$ cd 000build && cmake .. && 
[code]>

* Catch: if compilers change: @rm -rf CMake*@
* Catch: if CMake files change, @cmake .@ in the build directory
* !In-source builds are messy!
* Catch: after accidental in-source build,\\ remove the generated files.
 
==== Parameters ====

* See Doxygen documentation (link from \url{http://alpscore.org/}) for up-to-date info
* One can use input file, override with command line:

<[code][language=sh,emph={ALPSCore_DIR},emphstyle=\color{blue},basicstyle=\ttfamily]
$ ./demo --help
$ ./demo --name=value
$ ./demo --flag
[code]>

* Unknown parameters silently ignored.
* Accessing an unknown parameter throws an exception.
* You can assign to parameters (@define()@'d or not)
* Potential information loss ==> exception.

==== Simple simulation class (doing nothing) ====

* Simulation that just says ``I am running.''
* At this point, it is a good idea to indicate a debug or a release build:

<[code][language=sh,emph={CMAKE_BUILD_TYPE},emphstyle=\color{blue},basicstyle=\ttfamily]
$ cmake -DCMAKE_BUILD_TYPE=Debug ..
 # or:
$ cmake -DCMAKE_BUILD_TYPE=Release ..
[code]>

* @Make@ command options:
<[code][language=sh,basicstyle=\ttfamily]
$ make VERBOSE=1 # runs make printing all commands
$ make -j2 # run 2 Make processes, to compile faster
$ nice make -j4 # 4 low-priority processes
[code]>

==== Digression: Debug vs Release Builds (1) ====

* Let's look at a simple program that uses Green's Functions.
* Compiling and running without debugging:
<[code][language=sh,emph={ALPSCore_DIR},emphstyle=\color{blue},basicstyle=\small\ttfamily]
$ cmake .. 
$ make clean && make -j2 VERBOSE=1 
$ ulimit -S -c 0 && rm -f core
$ time -p ./alpsdemo
[code]>
-- -0.5\baselineskip -- 
''...(!Crash\!! after 8 seconds)...''
<[code][language=sh,emph={ALPSCore_DIR},emphstyle=\color{blue},basicstyle=\small\ttfamily]
$ ulimit -c unlimited 
$ time -p ./alpsdemo
[code]>
-- -0.5\baselineskip -- 
''...(!Crash\!! after 20 s, 12 of which is dumping core)...''
<[code][language=sh,emph={ALPSCore_DIR},emphstyle=\color{blue},basicstyle=\small\ttfamily]
$ gdb ./alpsdemo --core=core --ex bt --ex quit 
[code]>
-- -0.5\baselineskip -- 
''(No line information)'' @:-(@

==== Digression: Debug vs Release Builds (2) ====

* Let's look at a simple program that uses Green's Functions.
* Compiling and running with debugging:
<[code][language=sh,emph={DCMAKE_BUILD_TYPE,Debug},emphstyle=\color{blue},basicstyle=\small\ttfamily]
$ cmake -DCMAKE_BUILD_TYPE=Debug .. 
$ make clean && make -j2 VERBOSE=1 
$ ulimit -S -c 0 && rm -f core
$ time -p ./alpsdemo
[code]>
-- -0.5\baselineskip -- 
''...(Crash\! after 8 seconds)...''
<[code][language=sh,emph={ALPSCore_DIR},emphstyle=\color{blue},basicstyle=\small\ttfamily]
$ ulimit -c unlimited 
$ time -p ./alpsdemo
[code]>
-- -0.5\baselineskip -- 
''...(Crash\! after 20 s, 12 of which is dumping core)...''
<[code][language=sh,emph={ALPSCore_DIR},emphstyle=\color{blue},basicstyle=\small\ttfamily]
$ gdb ./alpsdemo --core=core --ex bt --ex quit 
[code]>
-- -0.5\baselineskip -- 
''(We have stack trace with line info!)'' @:-)@

==== Digression: Debug vs Release Builds (3) ====

* Let's look at a simple program that uses Green's Functions.
* Compiling and running as release:
<[code][language=sh,emph={Release},emphstyle=\color{blue},basicstyle=\small\ttfamily]
$ cmake -DCMAKE_BUILD_TYPE=Release .. 
$ make clean && make -j2 VERBOSE=1 
$ ulimit -S -c 0 && rm -f core
$ time -p ./alpsdemo
[code]>
-- -0.5\baselineskip -- 
''...(Crash\! after !1! second\!\!\!)...''@:-)@
<[code][language=sh,emph={ALPSCore_DIR},emphstyle=\color{blue},basicstyle=\small\ttfamily]
$ ulimit -c unlimited 
$ time -p ./alpsdemo
[code]>
-- -0.5\baselineskip -- 
''...(Crash\! after 13 s, 12 of which is dumping core)...''
<[code][language=sh,emph={ALPSCore_DIR},emphstyle=\color{blue},basicstyle=\small\ttfamily]
$ gdb ./alpsdemo --core=core --ex bt --ex quit 
[code]>
-- -0.5\baselineskip -- 
''...(We have short and useless stack dump)...'' :-(

==== Digression: Debug vs Release Builds (4) ====

* Let's look at a simple program that uses Green's Functions.
* Compiling and running as release with debug info:
<[code][language=sh,emph={RelWithDebInfo},emphstyle=\color{blue},basicstyle=\small\ttfamily]
$ cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo .. 
$ make clean && make -j2 VERBOSE=1 
$ ulimit -S -c 0 && rm -f core
$ time -p ./alpsdemo
[code]>
-- -0.5\baselineskip -- 
''...(Crash\! after !1! second\!\!\!)...''@:-)@
<[code][language=sh,emph={ALPSCore_DIR},emphstyle=\color{blue},basicstyle=\small\ttfamily]
$ ulimit -c unlimited 
$ time -p ./alpsdemo
[code]>
-- -0.5\baselineskip -- 
''...(Crash\! after 13 s, 12 of which is dumping core)...''
<[code][language=sh,emph={ALPSCore_DIR},emphstyle=\color{blue},basicstyle=\small\ttfamily]
$ gdb ./alpsdemo --core=core --ex bt --ex quit 
[code]>
-- -0.5\baselineskip -- 
''...(We have short but potentially useful stack dump)...''

However, by the time we crashed, memory may be '''already corrupted'''.

==== Back to ALPSCore: How to use MPI? ====

* (Recall the sequential simulation, a few slides back)
* Not many changes compared to the sequential version.
*# Use @alps::mcmpiadapter<@''SequentialSimulationClass''@>@\\ as your simulation class.
*# Initialize MPI environment \\ (ALPSCore uses @@boost::mpi@@ --- soon to go!)
*# Make sure that the parallel processes \\ do not conflict for input/output
*# In particular, the master (rank 0) process\\ reads and broadcasts parameters
* Note that the completion is checked only at certain intervals (1 sec minimum)

See the next slides for code changes!
-- 3\baselineskip --
==== MPI: Header files ====

<[code][style=basic,language=C++,basicstyle=\small\ttfamily,basewidth=0.4em]
#include <alps/mc/stop_callback.hpp>

[<2>#include <alps/mc/mpiadapter.hpp>]

class MySimulation : public alps::mcbase {
// ... rest of your class ...
};

[<2>typedef alps::mcmpiadapter<MySimulation> MyMpiSimulation;]
// ... rest of your program ...
[code]>

==== MPI: main() ====

<[code][language=C++,basicstyle=\small\ttfamily,basewidth=0.4em]
    alps::params p(argc, (const char**)argv);
[<1>    MySimulation::define_parameters(p)][<2>    MyMpiSimulation::define_parameters(p)]
            .description("Dummy Monte Carlo program")
// etc...
[<2>    // init MPI, obtain communicator]
[<2>    boost::mpi::environment mpi_env(argc, argv);]
[<2>    boost::mpi::communicator comm;]
[<2>    // Parse the parameters on master...]
[<2>    alps::params p;]
[<2>    if (comm.rank()==0) { // on master process...]
[<2>        alps::params p_master(argc, (const char**)argv);]
[<2>        p=p_master;]
[<2>    }]
[<2>    broadcast(comm, p, 0); // ...broadcast parameters to all.]
//....         
[code]> 

==== Use of scalar accumulators ====

* Time to split program into several files.
* The problem:
** Integral of objective function over an area.
** Trivial Metropolis step to stay inside the area. 
** Area: square
** Objective function: 1 if inside an inscribed circle, 0 otherwise.
** Expected result: $\pi$ (if multiplied by 4).
* '''_blue_Accumulators_''': named observable to gather statistics
* '''_blue_Results_''': named as accumulators, allow arithmetic operations (with error propagation!)
* Accumulators \& Results can hold a vector \\ (e.g., for vector-valued or parametrized objective function)

==== Types of accumulators ====
'''Types of accumulators''':
# Mean only (cheapest, least useful): @_blue_MeanAccumulator_<double>@
# No binning  (cheap, no autocorrelation info): @_blue_NoBinningAccumulator_<double>@
# Full binning (most expensive, autocorrelation, error propagation): @_blue_FullBinningAccumulator_<double>@
# Log binning (less memory demanding, no error propagation): @_blue_LogBinningAccumulator_<double>@
* Let's see performance differences (number of step we accomplished).
* If method is not available, it throws!
* Let's see if it indeed parallel.

==== How to do (suggestion) ====

* Play with step length and see how values change\\(especially autocorrelation length).
<[code][language=sh,emph={step},emphstyle=\color{blue},basicstyle=\small\ttfamily]
$ ./alpsdemo --step=#(\emph{0.5})
[code]>
-- -\baselineskip --
* Play with the number of processes\\(especially number of steps done).
<[code][language=sh,emph={mpirun,np},emphstyle=\color{blue},basicstyle=\small\ttfamily]
$ mpirun -np #(\emph{2}) ./alpsdemo --step=0.5
[code]>
-- -\baselineskip --

* Suggested steps:
*# First, try ``MeanAccumulator`` with different steps;
*# Second, try ``NoBinning`` and report the errorbar;
*# Then try ``FullBinning`` and report autocorrelation length;
*# Revert to ``MeanAccumulator`` and see the program throw.

==== Checkpointing the simulation ====

* Checkpoint: save intermediate results, load to resume 
* ALPSCore utilizes _blue_HDF5 format_
** Cross-platform
** Hierarchical structure: Groups ($\sim$directories), Data ($\sim$files)
* ALPSCore can save/load:
** Basic types (@int@, @double@ ''etc.'')
** Vectors of basic types and of vectors of basic types ''etc.''
** Accumulators and parameters
** Any user-defined class 
*** Via @save()@/@load()@ class members
*** Via traits (harder to do --- more complex code)
* Parameters can be constructed from HDF5 file too
** Should not try to define them again in this case! \\ Use @my\_params.is\_restored()@.
* Easiest if each process saves, loads
* Let's see how simulation files changed\!\\(see @step-5-7*.diff@)

==== Running and resuming  ====

#[1.] Run as usual:
<[code][language=sh,basicstyle=\small\ttfamily]
$ ./alpsdemo --help # Note new options!
$ # Run for 5 sec
$ mpirun -np 2 ./alpsdemo --step 1 --timelimit 5
[code]>
-- -\baselineskip --
#[2.] Note new files appear:
* ``@_blue_*.out_@'' file contains simulation results
* ``@_blue_*.clone.h5*_@'' files contain per-process checkpoints
#[3.] Restore the checkpoint:
<[code][language=sh,basicstyle=\small\ttfamily]
$ # Run for 10 more sec:
$ mpirun -np 2 ./alpsdemo alpsdemo.clone.h50 --timelimit 10 
[code]>
-- -\baselineskip --
* Note:
** compulsory @_blue_--step_@ is read from the checkpoint
** parameters can be overridden (like @_blue_--timelimit_@)

== Installing ALPSCore  == 

==== Obtainig ALPSCore ====
'''How to get ALPSCore?'''
* Downloading release: \\ \hspace{-1em}\url{https://github.com/ALPSCore/ALPSCore/releases}
* Getting from GitHub: \\ \hspace{-1em}@git clone https://github.com/ALPSCore/ALPSCore.git@
* Installing an ALPSCore package:
** Via @macports@ or @homebrew@ on  MacOS~X.
** Via @portage@ on Gentoo Linux.
** Debian or RedHat binary packages may be created\\ if demand arises.
-- 2\baselineskip --

==== Building and compilation ====

There are (of course\!) prerequisites.

* _blue_Tools_:
** C++03  (not @C++1x@ --- by policy). \\Tested with GCC 4.2+, Intel 10.0+, Clang 3.2+
** CMake 2.8.12+

* _blue_Libraries_:
** HDF5 1.8+
** Boost 1.54.0+
** MPI (technically, optional)
** GoogleTest (included!)

==== Building and compilation ====

* ALPSCore will try to find Boost, HDF5 and MPI. 
* Usually, if you can run @mpicc@, ALPSCore will also find MPI.
* Building using CMake command line:

<[code][language=sh,emph={DBOOST_ROOT,DHDF5_ROOT,DCMAKE_INSTALL_PREFIX},emphstyle=\color{blue},basicstyle=\ttfamily]
$ cmake -DBOOST_ROOT=/path/to/boost \
        -DHDF5_ROOT=/path/to/hdf5 \
        -DCMAKE_INSTALL_PREFIX=/usr/local/ALPSCore \
        /path/to/alpscore/sources
$ make
$ make install
[code]>

* There are some other CMake variables, less frequently used


==== For the next time ====

* Use of vector accumulators to do something more complex, and accumulator operations
* Assigning to parameters, from parameters
* Proper installation
** ``install`` target
** Automatic setting of RPATH
